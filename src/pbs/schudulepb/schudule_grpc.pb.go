// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schudulepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchuduleServiceClient is the client API for SchuduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchuduleServiceClient interface {
	CreateSchudule(ctx context.Context, in *CreateSchuduleRequest, opts ...grpc.CallOption) (*CreateSchuduleResponse, error)
	// times that reserved won't return
	FindAllOpenSchudules(ctx context.Context, in *FindAllOpenSchudulesRequest, opts ...grpc.CallOption) (*FindAllOpenSchudulesResponse, error)
	// times that reserved won't return
	FindConsultantOpenSchudules(ctx context.Context, in *FindConsultantOpenSchudulesRequest, opts ...grpc.CallOption) (*FindConsultantOpenSchudulesResponse, error)
}

type schuduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchuduleServiceClient(cc grpc.ClientConnInterface) SchuduleServiceClient {
	return &schuduleServiceClient{cc}
}

func (c *schuduleServiceClient) CreateSchudule(ctx context.Context, in *CreateSchuduleRequest, opts ...grpc.CallOption) (*CreateSchuduleResponse, error) {
	out := new(CreateSchuduleResponse)
	err := c.cc.Invoke(ctx, "/schudule.SchuduleService/CreateSchudule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schuduleServiceClient) FindAllOpenSchudules(ctx context.Context, in *FindAllOpenSchudulesRequest, opts ...grpc.CallOption) (*FindAllOpenSchudulesResponse, error) {
	out := new(FindAllOpenSchudulesResponse)
	err := c.cc.Invoke(ctx, "/schudule.SchuduleService/FindAllOpenSchudules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schuduleServiceClient) FindConsultantOpenSchudules(ctx context.Context, in *FindConsultantOpenSchudulesRequest, opts ...grpc.CallOption) (*FindConsultantOpenSchudulesResponse, error) {
	out := new(FindConsultantOpenSchudulesResponse)
	err := c.cc.Invoke(ctx, "/schudule.SchuduleService/FindConsultantOpenSchudules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchuduleServiceServer is the server API for SchuduleService service.
// All implementations must embed UnimplementedSchuduleServiceServer
// for forward compatibility
type SchuduleServiceServer interface {
	CreateSchudule(context.Context, *CreateSchuduleRequest) (*CreateSchuduleResponse, error)
	// times that reserved won't return
	FindAllOpenSchudules(context.Context, *FindAllOpenSchudulesRequest) (*FindAllOpenSchudulesResponse, error)
	// times that reserved won't return
	FindConsultantOpenSchudules(context.Context, *FindConsultantOpenSchudulesRequest) (*FindConsultantOpenSchudulesResponse, error)
	mustEmbedUnimplementedSchuduleServiceServer()
}

// UnimplementedSchuduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchuduleServiceServer struct {
}

func (UnimplementedSchuduleServiceServer) CreateSchudule(context.Context, *CreateSchuduleRequest) (*CreateSchuduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchudule not implemented")
}
func (UnimplementedSchuduleServiceServer) FindAllOpenSchudules(context.Context, *FindAllOpenSchudulesRequest) (*FindAllOpenSchudulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllOpenSchudules not implemented")
}
func (UnimplementedSchuduleServiceServer) FindConsultantOpenSchudules(context.Context, *FindConsultantOpenSchudulesRequest) (*FindConsultantOpenSchudulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConsultantOpenSchudules not implemented")
}
func (UnimplementedSchuduleServiceServer) mustEmbedUnimplementedSchuduleServiceServer() {}

// UnsafeSchuduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchuduleServiceServer will
// result in compilation errors.
type UnsafeSchuduleServiceServer interface {
	mustEmbedUnimplementedSchuduleServiceServer()
}

func RegisterSchuduleServiceServer(s grpc.ServiceRegistrar, srv SchuduleServiceServer) {
	s.RegisterService(&SchuduleService_ServiceDesc, srv)
}

func _SchuduleService_CreateSchudule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchuduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchuduleServiceServer).CreateSchudule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schudule.SchuduleService/CreateSchudule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchuduleServiceServer).CreateSchudule(ctx, req.(*CreateSchuduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchuduleService_FindAllOpenSchudules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllOpenSchudulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchuduleServiceServer).FindAllOpenSchudules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schudule.SchuduleService/FindAllOpenSchudules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchuduleServiceServer).FindAllOpenSchudules(ctx, req.(*FindAllOpenSchudulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchuduleService_FindConsultantOpenSchudules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConsultantOpenSchudulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchuduleServiceServer).FindConsultantOpenSchudules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schudule.SchuduleService/FindConsultantOpenSchudules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchuduleServiceServer).FindConsultantOpenSchudules(ctx, req.(*FindConsultantOpenSchudulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchuduleService_ServiceDesc is the grpc.ServiceDesc for SchuduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchuduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schudule.SchuduleService",
	HandlerType: (*SchuduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchudule",
			Handler:    _SchuduleService_CreateSchudule_Handler,
		},
		{
			MethodName: "FindAllOpenSchudules",
			Handler:    _SchuduleService_FindAllOpenSchudules_Handler,
		},
		{
			MethodName: "FindConsultantOpenSchudules",
			Handler:    _SchuduleService_FindConsultantOpenSchudules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/pbs/schudulepb/schudule.proto",
}
