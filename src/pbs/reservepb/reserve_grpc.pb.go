// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reservepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReserveServiceClient is the client API for ReserveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReserveServiceClient interface {
	Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error)
}

type reserveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReserveServiceClient(cc grpc.ClientConnInterface) ReserveServiceClient {
	return &reserveServiceClient{cc}
}

func (c *reserveServiceClient) Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error) {
	out := new(ReserveResponse)
	err := c.cc.Invoke(ctx, "/reserve.ReserveService/Reserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReserveServiceServer is the server API for ReserveService service.
// All implementations must embed UnimplementedReserveServiceServer
// for forward compatibility
type ReserveServiceServer interface {
	Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error)
	mustEmbedUnimplementedReserveServiceServer()
}

// UnimplementedReserveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReserveServiceServer struct {
}

func (UnimplementedReserveServiceServer) Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}
func (UnimplementedReserveServiceServer) mustEmbedUnimplementedReserveServiceServer() {}

// UnsafeReserveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReserveServiceServer will
// result in compilation errors.
type UnsafeReserveServiceServer interface {
	mustEmbedUnimplementedReserveServiceServer()
}

func RegisterReserveServiceServer(s grpc.ServiceRegistrar, srv ReserveServiceServer) {
	s.RegisterService(&ReserveService_ServiceDesc, srv)
}

func _ReserveService_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reserve.ReserveService/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).Reserve(ctx, req.(*ReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReserveService_ServiceDesc is the grpc.ServiceDesc for ReserveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReserveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reserve.ReserveService",
	HandlerType: (*ReserveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reserve",
			Handler:    _ReserveService_Reserve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/pbs/reservepb/reserve.proto",
}
